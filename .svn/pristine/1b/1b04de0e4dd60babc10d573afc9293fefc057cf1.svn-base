/*
 * Copyright© 2003-2016 浙江汇信科技有限公司, All Rights Reserved. 
 */
package com.icinfo.frk.business.service.impl;

import com.icinfo.framework.core.service.support.MyBatisServiceSupport;
import com.icinfo.framework.mybatis.pagehelper.Page;
import com.icinfo.framework.mybatis.pagehelper.PageHelper;
import com.icinfo.framework.mybatis.pagehelper.PageInfo;
import com.icinfo.framework.mybatis.pagehelper.datatables.PageRequest;
import com.icinfo.framework.mybatis.pagehelper.datatables.PageResponse;
import com.icinfo.frk.api.dto.FrCheckDto;
import com.icinfo.frk.business.dto.CaCyFddbrValidDto;
import com.icinfo.frk.business.dto.CaDjJbxxDto;
import com.icinfo.frk.business.entity.DesEncrypt;
import com.icinfo.frk.business.entity.FrPersons;
import com.icinfo.frk.business.entity.FrPersonsClass;
import com.icinfo.frk.business.mapper.CaCodeFrdjztMapper;
import com.icinfo.frk.business.mapper.CaCyDzxxValidMapper;
import com.icinfo.frk.business.mapper.CaCyFddbrValidMapper;
import com.icinfo.frk.business.mapper.CaDjJbxxMapper;
import com.icinfo.frk.business.model.CaCyDzxxValid;
import com.icinfo.frk.business.model.CaCyFddbr;
import com.icinfo.frk.business.model.CaCyFddbrValid;
import com.icinfo.frk.business.model.CaDjJbxx;
import com.icinfo.frk.business.service.ICaDjJbxxService;
import com.icinfo.frk.common.utils.AESEUtil;
import com.icinfo.frk.common.utils.CollectionUtils;
import com.icinfo.frk.common.utils.KeyWordsUtil;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

//import com.icinfo.frk.api.dto.FrCheckDto;

/**
 * 描述: ca_dj_jbxx 对应的Service接口实现类.<br>
 *
 * @author framework generator
 * @date 2017年06月27日
 */
@Service
public class CaDjJbxxServiceImpl extends MyBatisServiceSupport implements
    ICaDjJbxxService {

  /**
   * 日志记录器
   */
  private static final Logger logger = LoggerFactory
      .getLogger(CaDjJbxxServiceImpl.class);

  @Autowired
  private CaDjJbxxMapper caDjJbxxMapper;

  /**
   * 地址信息服务
   */
  @Autowired
  private CaCyDzxxValidMapper caCyDzxxValidMapper;


  @Autowired
  private CaCodeFrdjztMapper caCodeFrdjztMapper;

  @Autowired
  private CaCyFddbrValidMapper caCyFddbrValidMapper;

  /**
   * 分页获取法人登记基本信息。
   *
   * @param map 参数map
   * @param pageNum 当前页码
   * @param pageSize 每页条数
   * @return 法人登记证列表
   */
  @Override
  public PageInfo<CaDjJbxx> getByKeyword(Map<String, Object> map,
      int pageNum, int pageSize) {
    PageHelper.startPage(pageNum, pageSize);
    List<CaDjJbxx> list = caDjJbxxMapper.selectListByKeyword(map);
    String frwybs, tyxydm;
    for (CaDjJbxx caDjJbxx : list) {
      frwybs = caDjJbxx.getFrwybs();
      if (null != frwybs || !"".equals(frwybs)) {
        caDjJbxx.setFrwybs(AESEUtil.encodeCorpid(frwybs));
      }
      tyxydm = caDjJbxx.getTyxydm();
      if (null == tyxydm || "".equals(tyxydm)) {
        caDjJbxx.setTyxydm(caDjJbxx.getDjzch());
      }
    }
    Page<CaDjJbxx> page = (Page<CaDjJbxx>) list;
    return page.toPageInfo();
  }

  /**
   * 获取法人基本信息并替换tyxydm
   */
  @Override
  public PageInfo<CaDjJbxx> getBasic(Map<String, Object> map, int pageNum,
      int pageSize) {
    PageHelper.startPage(pageNum, pageSize);
    List<CaDjJbxx> list = caDjJbxxMapper.selectList(map);
    String frwybs, tyxydm;
    for (CaDjJbxx caDjJbxx : list) {
      frwybs = caDjJbxx.getFrwybs();
      if (null != frwybs || !"".equals(frwybs)) {
        caDjJbxx.setFrwybs(AESEUtil.encodeCorpid(frwybs));
      }
      tyxydm = caDjJbxx.getTyxydm();
      if (null == tyxydm || "".equals(tyxydm)) {
        caDjJbxx.setTyxydm(caDjJbxx.getDjzch());
      }
    }
    Page<CaDjJbxx> page = (Page<CaDjJbxx>) list;

    return page.toPageInfo();
  }

  /**
   * 获取法人登记证基本信息列表
   *
   * @param map 参数map
   * @return 法人登记证列表
   */
  @Override
  public List<CaDjJbxx> getList(Map<String, Object> map) {

    List<CaDjJbxx> list = caDjJbxxMapper.selectList(map);
    for (CaDjJbxx caDjJbxx : list) {
      String tyxydm = caDjJbxx.getTyxydm();
      if (null == tyxydm || "".equals(tyxydm)) {
        caDjJbxx.setTyxydm(caDjJbxx.getDjzch());
      }
    }
    return list;
  }

  /**
   * 获取法人基本信息页
   *
   * @param frwybs 法人唯一标识
   */
  @Override
  public Map<String, Object> getFrJbxx(String frwybs) throws Exception {
    Map<String, Object> map = new HashMap<>();

    // 1.获取主体登记信息
    try {
      CaDjJbxx cadj = caDjJbxxMapper.GetOneWithStatus(frwybs);
      if (null != cadj) {
        String tyxydm = cadj.getTyxydm();
        if (null == tyxydm || "".equals(tyxydm)) {
          String djzch = cadj.getDjzch();
          if(null != djzch && !"".equals(djzch)) {
        	  cadj.setTyxydm(djzch);
          }
          
        }
        map.put("ztdj", cadj);
      }
      //3.获取地址信息
      List<CaCyDzxxValid> list = caCyDzxxValidMapper.GetOne(frwybs);
      if (list.size() < 1) {
        map.put("dzxx", null);
      } else {
        map.put("dzxx", caCyDzxxValidMapper.GetOne(frwybs).get(0));
      }
    } catch (Exception e) {
      //e.printStackTrace();
      map.put("error", "数据可能存在异常");
    }
    return map;
  }

  /**
   * 获取法人资本与资产信息
   *
   * @param tyxydm 统一信用代码
   * @param frwybs 法人唯一标识
   */
  @Override
  public Map<String, Object> getFrZbyzc(String frwybs) throws Exception {
    Map<String, Object> map = new HashMap<>();

    // 1.获取主体登记信息
    try {
      CaDjJbxx caDjJbxx = caDjJbxxMapper.GetOne(frwybs);
      if (null != caDjJbxx) {
        String tyxydm = caDjJbxx.getTyxydm();
        if (null == tyxydm || "".equals(tyxydm)) {
          String djzch = caDjJbxx.getDjzch();
          if (djzch != null && !"".equals(djzch)) {
            caDjJbxx.setTyxydm(djzch);
          }
        }
        map.put("ztdj", caDjJbxx);
      }
    } catch (Exception e) {
      //e.printStackTrace();
      map.put("error", "数据可能存在异常");
    }
    return map;
  }

  /**
   * 法人校核
   *
   * @param tyxydm 统一信用代码
   * @param frdwmc 法人单位名称
   * @param zzjgdm 组织机构代码
   * @return 校核结果
   * @throws Exception 异常
   */
  @Override
  public List<FrCheckDto> frCheck(String tyxydm, String frdwmc, String zzjgdm)
      throws Exception {
    List<FrCheckDto> list = caDjJbxxMapper.frCheck(tyxydm, frdwmc, zzjgdm);
    return CollectionUtils.unique(list, "frwybs");
  }

  /**
   * 获取所有登记状态
   */
  @Override
  public List<String> getRegistStates() {
    List<String> states = caCodeFrdjztMapper.selectCxzts();
    ArrayList<String> list = new ArrayList<String>();
    if (states.contains("") || states.contains(null)) {
      for (String string : states) {
        if (!"".equals(string) && null != string) {
          list.add(string);
        }
      }
      return list;
    }
    return states;
  }

  /**
   * 获取高级查询页面
   */
  @Override
  public PageResponse<CaDjJbxxDto> getFrHighDetail(PageRequest request)
      throws Exception {
    PageHelper.startPage(request.getPageNum(), request.getLength());
    Map<String, Object> params = request.getParams();
    if (null != params) {
      String hydm = (String) params.get("hydm");
      if (null != hydm && !"".equals(hydm)) {
        String[] hydmStr = null;
        hydmStr = hydm.split(",");
        List<String> asList = Arrays.asList(hydmStr);
        params.put("hydmStr", asList);
      }
    }
    List<CaDjJbxxDto> list = caDjJbxxMapper.selectFrHighDetail(params);
    if (null != list && list.size() > 0) {
      for (CaDjJbxx cadjJbxx : list) {
        String corPid = cadjJbxx.getFrwybs();
        if (null != corPid && !"".equals(corPid)) {
          String frwybs = AESEUtil.encodeCorpid(corPid);
          cadjJbxx.setFrwybs(frwybs);
        }
      }
    }
    return new PageResponse<CaDjJbxxDto>(list);
  }

  /**
   * 获取自然人数量
   */
  @Override
  public int getPersonListCount(String keyword) throws Exception {
    Map<String, String> map = KeyWordsUtil.toSplit(keyword);
    CaCyFddbr caCyFddbr = new CaCyFddbr();
    if (null != map) {
      // 姓名
      String xm = map.get("name");
      // 身份证号
      String zjhm = map.get("cerNo");
      if (StringUtils.isNotBlank(xm)) {
        caCyFddbr.setXm(xm);
      }
      if (StringUtils.isNotBlank(zjhm)) {
        caCyFddbr.setZjhm(zjhm);
      }
      if ("".equals(zjhm) || null == zjhm) {
        int count = caCyFddbrValidMapper.getZjhmCount(xm);
        return count;
      }
    }
    int count = caCyFddbrValidMapper.getPersonCount(caCyFddbr);
    return count;
  }

  /**
   * 自然人身份查询
   */
  @Override
  public List<FrPersons> getPersonSearchList(String keyword) throws Exception {
    Map<String, String> map = KeyWordsUtil.toSplit(keyword);
    CaCyFddbr caCyFddbr = new CaCyFddbr();
    if (null != map) {
      // 姓名
      String xm = map.get("name");
      // 身份证号
      String zjhm = map.get("cerNo");
      if (StringUtils.isNotBlank(xm)) {
        caCyFddbr.setXm(xm);
      }
      if (StringUtils.isNotBlank(zjhm)) {
        caCyFddbr.setZjhm(zjhm);
      }
    }
    List<CaCyFddbr> personList = caCyFddbrValidMapper
        .getPersonList(caCyFddbr);
    ArrayList<FrPersons> list = new ArrayList<FrPersons>();
    DesEncrypt des = new DesEncrypt();
    des.getKey("aadd");// 生成密匙
    int i = 0;
    for (CaCyFddbr person : personList) {
      if (null != person) {
        String cerNO = person.getZjhm();
        String name = person.getXm();
        int frwybsCount = caCyFddbrValidMapper.getFrwybsCount(cerNO);
        if (frwybsCount != 0) {
          FrPersons frPerson = new FrPersons();
          frPerson.setName(name);
          frPerson.setCerNO(cerNO);
          String encString = des.getEncString(cerNO);
          frPerson.setCerNOAESE(encString);
          list.add(frPerson);
          i += 1;
        }
      }
    }
    return list;
  }

  @Override
  public FrPersonsClass getPersonPageList(int startNum, int length,
      String cerNo, String keyWord) throws Exception {
    CaCyFddbrValidDto caCyFddbr = new CaCyFddbrValidDto();
    FrPersonsClass frPersons = new FrPersonsClass();
    String xm = "";
    if (null != keyWord && !"".equals(keyWord)) {
      Map<String, String> map = KeyWordsUtil.toSplit(keyWord);
      // 姓名
      xm = map.get("name");
    }
    if (StringUtils.isNotBlank(cerNo)) {
      caCyFddbr.setZjhm(cerNo);
      if (StringUtils.isNotBlank(xm)) {
        caCyFddbr.setXm(xm);
      }
      caCyFddbr.setStartNum(startNum);
      caCyFddbr.setLength(length);
      int frwybsCount = caCyFddbrValidMapper.getFrwybsCount(cerNo);
      if (frwybsCount != 0) {
        List<CaCyFddbrValid> persons = caCyFddbrValidMapper
            .getPerson(caCyFddbr);
        ArrayList<FrPersons> dataList = new ArrayList<FrPersons>();
        for (CaCyFddbrValid person : persons) {
          if (null != person) {
            FrPersons frP = new FrPersons();
            String zw = person.getZw();
            String frwybs = person.getFrwybs();
            if (null != frwybs && !"".equals(frwybs)) {
              String corpid = AESEUtil.encodeCorpid(frwybs);
              frP.setFrwybs(corpid);
              if (null != zw && !"".equals(zw)) {
                frP.setLerepName(zw);
              } else {
                frP.setLerepName("法定代表人");
              }
              CaDjJbxx perDetail = caDjJbxxMapper
                  .getPerDetail(frwybs);
              if (null != perDetail) {
                String tyxydm = perDetail.getTyxydm();
                if (null != tyxydm && !"".equals(tyxydm)) {
                  frP.setUniCodeAndRegNO(tyxydm);
                } else {
                  String djzch = perDetail.getDjzch();
                  frP.setUniCodeAndRegNO(djzch);
                }
                String frmc = perDetail.getFrmc();
                // 所投资/企业名称
                frP.setEntName(frmc);
                // 成立时间
                Date djrq = perDetail.getDjrq();
                SimpleDateFormat sdf = new SimpleDateFormat(
                    "yyyy-MM-dd");
                String estDate = sdf.format(djrq);
                frP.setEstDate(estDate);
                // 登记机关
                String djjg = perDetail.getDjjg();
                frP.setRegOrgName(djjg);
                // 登记状态
                String cxzt = perDetail.getCxzt();
                frP.setRegStateName(cxzt);
              }
              dataList.add(frP);
            }
          }
        }
        frPersons.setData(dataList);
        frPersons.setRecordsFiltered(frwybsCount);
        frPersons.setRecordsTotal(frwybsCount);
      }
    }
    return frPersons;
  }

  @Override
  public PageResponse<CaDjJbxx> getCaDjJbxx(PageRequest request) throws Exception {
    PageHelper.startPage(request.getPageNum(), request.getLength());
    List<CaDjJbxx> list = caDjJbxxMapper.getCaDjJbxx(request.getParams());
    if (list != null && list.size() > 0) {
      for (CaDjJbxx cadjJbxx : list) {

        String frwybs = cadjJbxx.getFrwybs();
        if (!(frwybs == null || frwybs.trim().equals(""))) {
          String frwybss = AESEUtil.encodeCorpid(frwybs);

          cadjJbxx.setFrwybs(frwybss);
        }
      }
    }

    return new PageResponse<CaDjJbxx>(list);
  }


}